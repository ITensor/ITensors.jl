using ITensors, ITensorMPS
using Zygote
using OptimKit

function ising(n; h)
  ‚Ñã = Sum{Op}()
  for j in 1:(n-1)
    ‚Ñã -= "Z", j, "Z", j + 1
  end
  for j in 1:n
    ‚Ñã += h, "X", j
  end
  return ‚Ñã
end

n = 4
s = siteinds("S=1/2", n)

Œ≤ = 1.0
h·∂† = 1.1

‚Ñã·∂† = ising(n; h=h·∂†)
ùí∞·∂† = exp(-Œ≤ * ‚Ñã·∂†; alg=Trotter{1}(5))

U·∂† = Prod{ITensor}(ùí∞·∂†, s)

œà = prod(MPS(s, "0"))

# Target state
U·∂†œà = U·∂†(œà)

function loss(h)
  ‚Ñã = ising(n; h=h[1])
  ùí∞ ∞ = exp(-Œ≤ * ‚Ñã; alg=Trotter{1}(5))
  U ∞ = Prod{ITensor}(ùí∞ ∞, s)
  U ∞œà = U ∞(œà)
  return -abs(inner(U·∂†œà, U ∞œà))^2 / (norm(U·∂†œà) * norm(U ∞œà))^2
end

h‚Å∞ = [0.0]
@show loss(h‚Å∞)
@show loss'(h‚Å∞)

@show loss(h·∂†)
@show loss'(h·∂†)

loss_‚àáloss(h) = (loss(h), convert(Vector, loss'(h)))
algorithm = LBFGS(; gradtol=1e-3, verbosity=2)
h·µí·µñ·µó, _ = optimize(loss_‚àáloss, h‚Å∞, algorithm)

@show loss(h·µí·µñ·µó)
@show loss'(h·µí·µñ·µó)
