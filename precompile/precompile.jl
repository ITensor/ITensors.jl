function _precompile_()
  ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
  precompile(
    Tuple{
      Core.kwftype(typeof(ITensors.eigen)),
      NamedTuple{
        (
          :ishermitian,
          :which_decomp,
          :tags,
          :maxdim,
          :mindim,
          :cutoff,
          :eigen_perturbation,
          :ortho,
        ),
        Tuple{Bool,Nothing,TagSet,Int64,Int64,Float64,Nothing,String},
      },
      typeof(eigen),
      ITensor{2},
      IndexSet{1,Index{Int64},Tuple{Index{Int64}}},
      IndexSet{1,Index{Int64},Tuple{Index{Int64}}},
    },
  )
  precompile(
    Tuple{
      Core.kwftype(typeof(ITensors.factorize)),
      NamedTuple{
        (:which_decomp, :tags, :maxdim, :mindim, :cutoff, :eigen_perturbation, :ortho),
        Tuple{Nothing,TagSet,Int64,Int64,Float64,Nothing,String},
      },
      typeof(factorize),
      ITensor{3},
      IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
    },
  )
  precompile(
    Tuple{
      Core.kwftype(typeof(ITensors.replacebond!)),
      NamedTuple{
        (:maxdim, :mindim, :cutoff, :eigen_perturbation, :ortho, :which_decomp),
        Tuple{Int64,Int64,Float64,Nothing,String,Nothing},
      },
      typeof(replacebond!),
      MPS,
      Int64,
      ITensor{3},
    },
  )
  precompile(
    Tuple{
      Core.kwftype(typeof(KrylovKit.eigsolve)),
      NamedTuple{
        (:ishermitian, :tol, :krylovdim, :maxiter),Tuple{Bool,Float64,Int64,Int64}
      },
      typeof(KrylovKit.eigsolve),
      ProjMPO,
      ITensor{3},
      Int64,
      Symbol,
    },
  )
  precompile(
    Tuple{
      Core.kwftype(typeof(KrylovKit.expand!)),
      NamedTuple{(:verbosity,),Tuple{Int64}},
      typeof(KrylovKit.expand!),
      KrylovKit.LanczosIterator{ProjMPO,ITensor{3},KrylovKit.ModifiedGramSchmidt2},
      KrylovKit.LanczosFactorization{ITensor{3},Float64},
    },
  )
  precompile(
    Tuple{
      Core.kwftype(typeof(NDTensors.eigen)),
      NamedTuple{
        (
          :ishermitian,
          :which_decomp,
          :tags,
          :maxdim,
          :mindim,
          :cutoff,
          :eigen_perturbation,
          :ortho,
        ),
        Tuple{Bool,Nothing,TagSet,Int64,Int64,Float64,Nothing,String},
      },
      typeof(eigen),
      LinearAlgebra.Hermitian{
        Float64,
        NDTensors.Tensor{
          Float64,
          2,
          NDTensors.Dense{Float64,Array{Float64,1}},
          IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
        },
      },
    },
  )
  precompile(
    Tuple{
      Core.kwftype(typeof(NDTensors.svd)),
      NamedTuple{(:alg,),Tuple{String}},
      typeof(svd),
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
    },
  )
  precompile(
    Tuple{
      Core.kwftype(typeof(NDTensors.svd)),
      NamedTuple{(:alg,),Tuple{String}},
      typeof(svd),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
    },
  )
  precompile(Tuple{ProjMPO,ITensor{3}})
  precompile(Tuple{Type{MPO},AutoMPO,Array{Index{Int64},1}})
  precompile(Tuple{Type{TagSet},String})
  precompile(
    Tuple{
      typeof(*),
      Float64,
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
    },
  )
  precompile(Tuple{typeof(*),ITensor{2},ITensor{3}})
  precompile(Tuple{typeof(*),ITensor{3},ITensor{1}})
  precompile(Tuple{typeof(*),ITensor{3},ITensor{2}})
  precompile(Tuple{typeof(*),ITensor{3},ITensor{3}})
  precompile(Tuple{typeof(*),ITensor{4},ITensor{1}})
  precompile(Tuple{typeof(*),ITensor{4},ITensor{4}})
  precompile(Tuple{typeof(==),Array{Index{Int64},1},Array{Index{Int64},1}})
  precompile(
    Tuple{
      typeof(==),
      IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
    },
  )
  precompile(Tuple{typeof(==),TagSet,TagSet})
  precompile(
    Tuple{
      typeof(Base.Broadcast.materialize!),
      ITensor{4},
      Base.Broadcast.Broadcasted{
        ITensors.ITensorStyle,Nothing,typeof(+),Tuple{ITensor{4},ITensor{4}}
      },
    },
  )
  precompile(Tuple{typeof(Base.afoldl),typeof(*),ITensor{4},ITensor{3}})
  precompile(
    Tuple{typeof(ITensors.setstore!),ITensor{2},NDTensors.Dense{Float64,Array{Float64,1}}}
  )
  precompile(
    Tuple{
      typeof(KrylovKit.orthogonalize!),ITensor{3},ITensor{3},KrylovKit.ModifiedGramSchmidt2
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Number,
        2,
        NDTensors.Combiner,
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Diag{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Float64,0,NDTensors.Dense{Float64,Array{Float64,1}},IndexSet{0,Union{},Tuple{}}
      },
      Tuple{},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Number,
        2,
        NDTensors.Combiner,
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Diag{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        1,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{1,Index{Int64},Tuple{Index{Int64}}},
      },
      Tuple{Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
      NDTensors.Tensor{
        Float64,
        1,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{1,Index{Int64},Tuple{Index{Int64}}},
      },
      Tuple{Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contract!!),
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contraction_output),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      IndexSet{0,Union{},Tuple{}},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.contraction_output),
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NDTensors.Tensor{
        Float64,
        1,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{1,Index{Int64},Tuple{Index{Int64}}},
      },
      IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.getperm),
      IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.permutedims!!),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      Function,
    },
  )
  precompile(
    Tuple{
      typeof(NDTensors.permutedims!!),
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
      Function,
    },
  )
  precompile(
    Tuple{
      typeof(Random.randn!),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
    },
  )
  precompile(Tuple{typeof(axpy!),Float64,ITensor{3},ITensor{3}})
  precompile(Tuple{typeof(combiner),Index{Int64}})
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Number,
        2,
        NDTensors.Combiner,
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NTuple{4,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      Tuple{Int64,Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Number,
        2,
        NDTensors.Combiner,
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Number,
        2,
        NDTensors.Combiner,
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Diag{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Diag{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Diag{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Diag{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        1,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{1,Index{Int64},Tuple{Index{Int64}}},
      },
      Tuple{Int64},
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        1,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{1,Index{Int64},Tuple{Index{Int64}}},
      },
      Tuple{Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
      Tuple{Int64,Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NTuple{4,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      Tuple{Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      Tuple{},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
      NDTensors.Tensor{
        Float64,
        1,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{1,Index{Int64},Tuple{Index{Int64}}},
      },
      Tuple{Int64},
      Tuple{Int64,Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
      NDTensors.Tensor{
        Float64,
        1,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{1,Index{Int64},Tuple{Index{Int64}}},
      },
      Tuple{Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
      Tuple{Int64,Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
      NDTensors.Tensor{
        Float64,
        3,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      },
      Tuple{Int64,Int64,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
      NTuple{4,Int64},
    },
  )
  precompile(
    Tuple{
      typeof(contract),
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
      NDTensors.Tensor{
        Float64,
        4,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{4,Index{Int64},NTuple{4,Index{Int64}}},
      },
      NTuple{4,Int64},
    },
  )
  precompile(
    Tuple{typeof(hassameinds),ITensor{3},Tuple{Index{Int64},Index{Int64},Index{Int64}}}
  )
  precompile(Tuple{typeof(hastags),TagSet,String})
  precompile(Tuple{typeof(itensor),Array{Float64,2},Index{Int64},Index{Int64}})
  precompile(
    Tuple{
      typeof(itensor),Array{Float64,3},Index{Int64},Index{Int64},Vararg{Index,N} where N
    },
  )
  precompile(Tuple{typeof(mul!),ITensor{3},ITensor{3},Float64})
  precompile(
    Tuple{
      typeof(mul!),
      ITensor{3},
      KrylovKit.OrthonormalBasis{ITensor{3}},
      SubArray{Float64,1,Array{Float64,2},Tuple{UnitRange{Int64},Int64},true},
    },
  )
  precompile(Tuple{typeof(prime),ITensor{3},ITensors.Not{TagSet}})
  precompile(
    Tuple{
      typeof(prime),
      IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      Int64,
      ITensors.Not{IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}}},
    },
  )
  precompile(Tuple{typeof(randomITensor),Index{Int64},Index{Int64},Index{Int64}})
  precompile(Tuple{typeof(randomMPS),Array{Index{Int64},1},Int64})
  precompile(Tuple{typeof(replaceind!),ITensor{2},Index{Int64},Index{Int64}})
  precompile(Tuple{typeof(replaceind!),ITensor{3},Index{Int64},Index{Int64}})
  precompile(
    Tuple{
      typeof(replaceind),
      IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      Index{Int64},
      Index{Int64},
    },
  )
  precompile(
    Tuple{
      typeof(replaceinds),
      IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      Tuple{Index{Int64},Index{Int64}},
      Tuple{Index{Int64},Index{Int64}},
    },
  )
  precompile(
    Tuple{
      typeof(replaceinds),
      IndexSet{3,Index{Int64},Tuple{Index{Int64},Index{Int64},Index{Int64}}},
      IndexSet{1,Index{Int64},Tuple{Index{Int64}}},
      IndexSet{1,Index{Int64},Tuple{Index{Int64}}},
    },
  )
  precompile(
    Tuple{
      typeof(setindex!),
      Dict{Array{ITensors.SiteOp,1},Array{Float64,2}},
      Array{Float64,2},
      Array{ITensors.SiteOp,1},
    },
  )
  precompile(
    Tuple{
      typeof(svd),
      NDTensors.Tensor{
        Complex{Float64},
        2,
        NDTensors.Dense{Complex{Float64},Array{Complex{Float64},1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
    },
  )
  precompile(
    Tuple{
      typeof(svd),
      NDTensors.Tensor{
        Float64,
        2,
        NDTensors.Dense{Float64,Array{Float64,1}},
        IndexSet{2,Index{Int64},Tuple{Index{Int64},Index{Int64}}},
      },
    },
  )
  return precompile(
    Tuple{
      typeof(zip),
      IndexSet{1,Index{Int64},Tuple{Index{Int64}}},
      Vararg{IndexSet{1,Index{Int64},Tuple{Index{Int64}}},N} where N,
    },
  )
end
