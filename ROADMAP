## Misc To Do


+ Could ITensor getindex, setindex! be simplified?
  - map expression is a bit hard to parse
  - could args be IndexVal... instead of Union{IndexVal,AbstractVector{IndexVal}...}?

+ Reduce dependencies

? Replace InitState with just a Vector{String}?
  state = fill("Up",N)
  for n=1:N
    state[n] = isodd(n) ? "Up" : "Dn"
  end
  psi = MPS(state)
  
+ Add noise term support to DMRG

+ Add docstrings (see mps/dmrg.jl for an example)

+ Add copyright notice on top of files (see C++ version)

+ Finish prime & tag methods

+ Read/write of ITensors and other objects, using HDF5 format

+ Combiner storage for ITensor. Should be easy for Dense case.

+ davidson improvements
  - evaluate logic (cyclic permutation of order of steps in main for loop?)
  - improve definitions and handling of parameters such as miniter, maxiter

+ MPS/MPO algorithms
  - sum
  - applyMPO
  - errorMPOProd
  - multMPO (renamed from nmultMPO, or provide a wrapper for convenience)

+ Additional DMRG algorithms:
  - Vector of MPOs
  - orthogonalize against previous MPS
  - supply boundary environment tensors

+ Boson site set
 
+ Fancier AutoMPO interface?
  Ideas:
  1. ampo += "J Sz_{i} Sz_{i+1}" (using Meta.parse and eval)
  2. ampo += J*"Sz"(i)*"Sz"(i+1) (using operator overloading)
  3. define a macro @autompo or similar

+ QN Index

+ QN block-sparse tensors (with separate block-sparse library as discussed)

+ QN version of AutoMPO

+ Fermion support for AutoMPO (possibly through auto fermionic signs)

+ Move AutoMPO & physics site sets into separate ITensor physics package?

+ Slicing of ITensors


## Performance Issues

## Design Questions

+ What version number to use? 1.0? 

+ Switch to same version git branch naming scheme as the C++ repo uses

+ Should we rename methods like storage_svd etc. to just svd?
  Arguments for changing:
    - could use storage objects better in generic algorithms
      (e.g. put a Dense{Float64} object into a Krylov library routine)
    - hard to draw line between which functions are "storage_func" or just "func"
  Arguments for status quo:
    - makes code more readable in some ways
    - easier to see which methods to overload to make a new storage type
      (but we can address this by listing such methods in the docs)

## Optimization Ideas

+ Mimic "small vector" / "InfArray" optimization used in C++ ITensor.
  This optimization makes IndexSets not allocate on the heap until 
  the number of indices exceeds a certain size. Use a stack-allocated / non-allocating
  fixed-size array or tuple to hold indices below that size.

## Final Release Checks

+ Apply license text to all source files (see appendix of LICENSE file)
+ Make sure installation is clean on a brand new Julia install (no libraries at all)
+ Ensure dependencies are the true minimum amount
