pipeline {
  agent none
  options {
    disableConcurrentBuilds()
    buildDiscarder(logRotator(numToKeepStr: '8', daysToKeepStr: '20'))
  }
  stages {
    stage('ITensorGPU test') {
      parallel {
        stage('julia-1.6') {
	  options {
            timeout(time: 45, unit: 'MINUTES')
          }
          agent {
            dockerfile {
              label 'gpu&&v100'
              filename 'Dockerfile'
              dir 'jenkins'
              additionalBuildArgs  '--build-arg JULIA=1.6'
              args '--gpus "device=0"'
            }
          }
          environment {
            HOME = pwd(tmp:true)
            OMP_NUM_THREADS = 4
            JULIA_NUM_THREADS = 4
          }
          steps {
            sh '''
              julia -e 'using Pkg; Pkg.activate("test_itensorgpu"); Pkg.develop(path=joinpath(pwd(), "ITensorGPU")); Pkg.develop(path=joinpath(pwd(), "NDTensors")); Pkg.develop(path=joinpath(pwd())); cd(joinpath(pwd(), "test_itensorgpu")); Pkg.add("CUDA"); using CUDA; Pkg.add("Preferences"); using Preferences; set_preferences!(Base.UUID("76a88914-d11a-5bdc-97e0-2f5a05c973a2"), Pair("version", "v11.8"); export_prefs=true); Pkg.test("ITensorGPU")'
              '''
          }
        }
        stage('julia-1.8') {
	  options {
            timeout(time: 45, unit: 'MINUTES')
          }
          agent {
            dockerfile {
              label 'gpu&&v100'
              filename 'Dockerfile'
              dir 'jenkins'
              additionalBuildArgs  '--build-arg JULIA=1.8'
              args '--gpus "device=1"'
            }
          }
          environment {
            HOME = pwd(tmp:true)
            OMP_NUM_THREADS = 4
            JULIA_NUM_THREADS = 4
          }
          steps {
            sh '''
            julia -e 'using Pkg; Pkg.activate("test_itensorgpu"); Pkg.develop(path=joinpath(pwd(), "ITensorGPU")); Pkg.develop(path=joinpath(pwd(), "NDTensors")); Pkg.develop(path=joinpath(pwd())); cd(joinpath(pwd(), "test_itensorgpu")); Pkg.add("CUDA"); using CUDA; Pkg.add("Preferences"); using Preferences; set_preferences!(Base.UUID("76a88914-d11a-5bdc-97e0-2f5a05c973a2"), Pair("version", "v11.8"); export_prefs=true); Pkg.test("ITensorGPU")'
            '''
          }
        }
      }
    }
  }
}
